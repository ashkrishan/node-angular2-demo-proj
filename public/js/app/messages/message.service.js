"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
var Observable_1 = require('rxjs/Observable');
require('rxjs/add/operator/map');
require('rxjs/add/operator/catch');
require('rxjs/add/observable/throw');
var message_1 = require('./message');
var MessageService = (function () {
    function MessageService(_http) {
        this._http = _http;
        this.messages = [];
        this.messageIsEdited = new core_1.EventEmitter();
        this.messageUrl = 'http://localhost:3000/message';
        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
    }
    MessageService.prototype.getMessages = function () {
        return this._http.get(this.messageUrl)
            .map(function (response) {
            var data = response.json().obj;
            var objs = [];
            data.forEach(function (obj) {
                var message = new message_1.Message(obj.content, obj._id, 'AJAXFakeUser', null);
                objs.push(message);
            });
            console.log(objs);
            return objs;
        });
    };
    MessageService.prototype.addMessage = function (message) {
        var token = localStorage.getItem('token') ? '?token=' + localStorage.getItem('token') : ' ';
        return this._http.post(this.messageUrl + token, JSON.stringify(message), { headers: this.headers })
            .map(function (response) {
            var data = response.json().obj;
            var message = new message_1.Message(data.content, data._id, 'AJAXFakeUser12', null);
            return message;
        })
            .catch(function (error) { return Observable_1.Observable.throw(error.json()); });
    };
    MessageService.prototype.deleteMessage = function (message) {
        var token = localStorage.getItem('token') ? '?token=' + localStorage.getItem('token') : ' ';
        this.messages.splice(this.messages.indexOf(message), 1);
        return this._http.delete(this.messageUrl + '/' + message.messageId + token, { headers: this.headers })
            .map(function (response) {
            var data = response.json().obj;
            var message = new message_1.Message(data.content, data._id, data.user.firstName, data.user._id);
        })
            .catch(function (error) { return Observable_1.Observable.throw(error.json()); });
    };
    MessageService.prototype.editMessage = function (message) {
        this.messageIsEdited.emit(message);
        // });
    };
    MessageService.prototype.updateMessage = function (message) {
        var token = localStorage.getItem('token') ? '?token=' + localStorage.getItem('token') : ' ';
        //this.messages[this.messages.indexOf(message)] = new Message('Edited', null, 'KDDJ');
        message = new message_1.Message(message.content, message.messageId, 'KDDJ', null);
        return this._http.patch(this.messageUrl + '/' + message.messageId + token, JSON.stringify(message), { headers: this.headers })
            .map(function (response) {
            var data = response.json().obj;
            var message = new message_1.Message(data.content, data._id, 'KDDJ', null);
            return message;
        })
            .catch(function (error) { return Observable_1.Observable.throw(error.json()); });
    };
    MessageService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], MessageService);
    return MessageService;
}());
exports.MessageService = MessageService;

//# sourceMappingURL=data:application/json;base64,
